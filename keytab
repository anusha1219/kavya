Follow these commands to create a Keytab
$ ktutil
ktutil:  addent -password -p <badge>@MYREALM.COM -k 1 -e arcfour-hmac
Password for <badge>@MYREALM.COM:
ktutil:  wkt <badge>.keytab
ktutil:  q



kinit hive@MYREALM.COM -kt hive.keytab



What is Krb5.conf ?
The krb5.conf file contains Kerberos configuration information, including the locations of KDCs and admin servers for the Kerberos
realms of interest, defaults for the current realm and for Kerberos applications, and mappings of hostnames onto Kerberos realms



What we are changing in krb5.conf
 We do have realm entries for dmn1 in our krb5.conf and in past we were having issues when those servers getting decommissioned. Network team replaced them with F5 based load balancer for DMN1. 
So we are updating krb5.conf with loadbalancer based realm for DMN1
So we are commenting out or removing the below entries in krb5.conf and replacing them with dmn1f5.fmr.com = DMN1.FMR.COM
fidral017ads.dmn1.fmr.com = DMN1.FMR.COM
fidral018ads.dmn1.fmr.com = DMN1.FMR.COM
fidral019ads.dmn1.fmr.com = DMN1.FMR.COM 

Where we can find update krb5.conf and how to push the updated krb5.conf in to cluster nodes.?
updated Krb5.conf will be available in ansible server @/apps/big-data-ansible-repo/roles/bds-ansible-krb5-conf/files/krb5.conf and in itec-stash repo.
(https://itec-stash.fmr.com/projects/AP105000/repos/ap105000-big-data-admin-scripts/browse/roles/bds-ansible-krb5-conf/files?at=refs%2Fheads%2Fmaster)

You can push the updated krb5.conf using with ansible-playbook command from ansible server as mentioned below
ex: #ansible-playbook -l LAB bds-ansible-krb5-conf.yml

How to validate ?
You can validate the credentials using kinit command 
ex : 
$ kinit a410862@DMN1.FMR.COM
Password for a410862@DMN1.FMR.COM:
$ klist -e
Ticket cache: FILE:/tmp/krb5cc_cdc1410862_SqxNxx
Default principal: a410862@DMN1.FMR.COM

Valid starting Expires Service principal
01/17/18 05:05:36 01/17/18 15:05:40 krbtgt/DMN1.FMR.COM@DMN1.FMR.COM
renew until 01/18/18 05:05:36, Etype (skey, tkt): aes256-cts-hmac-sha1-96, aes256-cts-hmac-sha1-96
its always better to run few hadoop based to tests after the krb5.conf replace to make sure cluster is running without  any authentication issue.
Here are few tests you can carry out , but not limited.

$ hdfs dfs -getfacl /user/a410862/

# file: /user/a410862
# owner: hdfs
# group: supergroup
user::rwx
group::r-x
other::---

$

Run this as hdfs user
#/usr/bin/hadoop jar /opt/cloudera/parcels/CDH/lib/hadoop-mapreduce/hadoop-mapreduce-examples.jar pi 10 10
#/usr/bin/yarn jar /opt/cloudera/parcels/CDH/lib/hadoop-mapreduce/hadoop-mapreduce-examples.jar pi 10 10

How to back out the change?
Replace the new krb5.conf with old krb5.conf and perform the validation steps. No outage required. 
